################################################################################
# Stash/unstash support for per-directory variables
#
# Adopted for zsh-autoenv.
#
#   Copyright (c) 2009,2012 Dave Olszewski <cxreg@pobox.com>
#   http://github.com/cxreg/smartcd
#
#   This code is released under GPL v2 and the Artistic License, and
#   may be redistributed under the terms of either.
#
#
#   This library allows you to save the current value of a given environment
#   variable in a temporary location, so that you can modify it, and then
#   later restore its original value.
#
#   Note that you will need to be in the same directory you were in when you
#   stashed in order to successfully unstash.  This is because the temporary
#   variable is derived from your current working directory's path.
#
#   Usage:
#       stash PATH
#       export PATH=/something/else
#       [...]
#       unstash PATH
#
#   Note that this was written for use with, and works very well with,
#   smartcd.  See the documentation there for examples.
#
#   An alternate usage is `autostash' which will trigger autounstash when
#   leaving the directory, if combined with smartcd.  This reduces the amount
#   of explicit configuration you need to provide:
#
#       autostash PATH
#       export PATH=/something/else
#
#   You may also do both operations in one line, resulting in the very succinct
#
#       autostash PATH=/something/else
#
#   If you attempt to stash the same value twice, a warning will be displayed
#   and the second stash will not occur.  To make it happen anyway, pass -f
#   as the first argument to stash.
#
#       $ stash FOO
#       $ stash FOO
#       You have already stashed FOO, please specify "-f" if you want to overwrite another stashed value.
#       $ stash -f FOO
#       $
#
#   This rule is a bit different if you are assigning a value and the variable
#   has already been stashed.  In that case, the new value will be assigned, but
#   the stash will not be overwritten.  This allows for non-conflicting chained
#   stash-assign rules.
#
################################################################################

function stash() {
    if [[ $1 == "-f" ]]; then
        local force=1; shift
    fi

    while [[ -n $1 ]]; do
        if [[ $1 == "alias" && $2 == *=* ]]; then
            shift
            local _stashing_alias_assign=1
            continue
        fi

        local stash_expression=$1
        local stash_which=${stash_expression%%'='*}
        local stash_name=
        _mangle_var $stash_which stash_name

        # Extract the value and make it double-quote safe
        local stash_value=${stash_expression#*'='}

        local var=
        if [[ -z $force ]]; then
            for var in __varstash_{alias,function,array,associative_array,export,variable,readonly,nostash}"__$stash_name"; do
                if [[ -n ${(Pt)var} ]]; then
                    if [[ -z $already_stashed && ${already_stashed-_} == "_" ]]; then
                        local already_stashed=1
                    else
                        already_stashed=1
                    fi
                    break
                fi
            done
        fi

        if [[ -n $already_stashed ]] && [[ $stash_which == $stash_expression ]]; then
            if [[ -z $run_from_smartcd ]]; then
                echo "You have already stashed $stash_which, please specify \"-f\" if you want to overwrite another stashed value."
            fi

            # Skip remaining work if we're not doing an assignment
            shift
            continue
        fi

        # Handle any alias that may exist under this name
        if [[ ${aliases[$stash_which]+1} ]] && [[ -z $already_stashed ]]; then
            typeset -g "__varstash_alias__$stash_name=${aliases[$stash_which]}"
            local stashed=1
        fi

        if [[ $stash_which != $stash_expression && -n $_stashing_alias_assign ]]; then
            alias "$stash_which=$stash_value"
        fi

        # Handle any function that may exist under this name
        if [[ ${functions[$stash_which]+1} ]] && [[ -z $already_stashed ]]; then
            typeset -g "__varstash_function__$stash_name=${functions[$stash_which]}"
            local stashed=1
        fi

        # Handle any variable that may exist under this name
        local vartype="${(Pt)stash_which}"
        if [[ -n $vartype ]]; then
            if [[ $vartype == *readonly* ]]; then
                # readonly only variables don't need to be stashed
                if [[ -z $already_stashed ]]; then
                    typeset -g "__varstash_readonly__$stash_name="
                fi
            elif [[ $vartype == array* ]]; then
                # varible is an array
                if [[ -z $already_stashed ]]; then
                    set -A  __varstash_array__$stash_name "${(P@)stash_which}"
                fi
            elif [[ $vartype == association* ]]; then
                # varible is an associative array
                if [[ -z $already_stashed ]]; then
                    typeset -g -A __varstash_associative_array__$stash_name
                    set -A __varstash_associative_array__$stash_name "${(Pkv@)stash_which}"

                fi
            elif [[ $vartype == *export* ]]; then
                # variable is exported
                if [[ -z $already_stashed ]]; then
                    # Handle variables that change their values when expanded
                    if [[ $vartype == *(left|right_blanks|right_zeros|lower|upper)* ]]; then
                        # ${(Q)$(typeset + a)#a=}
                        export "__varstash_export__$stash_name=${(Q)$(typeset -m "$stash_which")#${stash_which}=}"
                    else
                        export "__varstash_export__$stash_name=${(P)stash_which}"
                    fi
                fi
                if [[ $stash_which != $stash_expression && -z $_stashing_alias_assign ]]; then
                    export "$stash_which=$stash_value"
                fi
            else
                # regular variable
                if [[ -z $already_stashed ]]; then
                    # Handle variables that change their values when expanded
                    if [[ $vartype == *(left|right_blanks|right_zeros|lower|upper)* ]]; then
                        typeset -g "__varstash_variable__$stash_name=${(Q)$(typeset -m "$stash_which")#${stash_which}=}"
                    else
                        typeset -g "__varstash_variable__$stash_name=${(P)stash_which}"
                    fi
                fi
                if [[ $stash_which != $stash_expression && -z $_stashing_alias_assign ]]; then
                    typeset -g "$stash_which=$stash_value"
                fi

            fi
            local stashed=1
        fi

        if [[ -z $stashed ]]; then
            # Nothing in the variable we're stashing, but make a note that we stashed so we
            # do the right thing when unstashing.  Without this, we take no action on unstash

            # Zsh bug sometimes caues
            # (eval):1: command not found: __varstash_nostash___tmp__home_dolszewski_src_smartcd_RANDOM_VARIABLE=1
            # fixed in zsh commit 724fd07a67f, version 4.3.14
            if [[ -z $already_stashed ]]; then
                export "__varstash_nostash__$stash_name=1"
            fi

            # In the case of a previously unset variable that we're assigning too, export it
            if [[ $stash_which != $stash_expression && -z $_stashing_alias_assign ]]; then
                export "$stash_which=$stash_value"
            fi
        fi

        shift
        unset -v _stashing_alias_assign
    done
}

function get_autostash_array_name() {
    _mangle_var autostash ret
}

function make_autostash_array() {
    local ret
    get_autostash_array_name
    # Create a scalar variable linked to an array (for exporting).
    local autostash_name=${(U)ret}
    if ! (( ${(P)+ret} )); then
        # Conditionally set it, to prevent error with Zsh 4.3:
        # can't tie already tied scalar: ...
        typeset -xUT $autostash_name $ret
    fi
}

function autostash() {
    local run_from_autostash=1
    local ret varname
    local already_stashed=
    get_autostash_array_name

    make_autostash_array
    while [[ -n $1 ]]; do
        if [[ $1 == "alias" && $2 == *=* ]]; then
            shift
            local _stashing_alias_assign=1
        fi

        already_stashed=
        stash "$1"
        if [[ -z $already_stashed ]]; then
            varname=${1%%'='*}
            set -A $ret "${(P@)ret}" "$varname"
        fi
        shift
        unset -v _stashing_alias_assign
    done
}

function autosource () {
    if [[ -z $1 ]]; then
        return
    fi

    if [[ "${(t)__varstash_autosource_ignore}" != array-* ]]; then
        typeset -a __varstash_autosource_ignore=()
    fi


    # An array with a list of patterns of variables to ignore by autosource
    # Includes by default:
    #      1. Variables managed by this file
    #          * Variables used to stash values
    #          * Varstash autostash arrays
    #          * This variable
    #          * The ignore pattern generated from this variable
    #      2. Special shell variables that don't make sense to autosource
    __varstash_autosource_ignore+=(
        "__varstash_(alias|associative_array|array|export|function|variable|readonly|nostash)___tmp_*"
        "_tmp_*_autostash"
        "_TMP_*_AUTOSTASH"
        __varstash_autosource_ignore
        __varstash_autosource_ignore_pattern
        RANDOM
        SECONDS
        options
    )
    local __varstash_autosource_ignore_pattern="(${(j:|:)__varstash_autosource_ignore})"
    # Anonymous function to limit scope of locals
    function () {
        local nonreadonly=( ${(@f)$(set +):#${~__varstash_autosource_ignore_pattern}} )
        # Autostash all variables that are not readonly
        # Prevent already stashed messages by defining run_from_smartcd
        run_from_smartcd=1 autostash "${(@)nonreadonly}"
    }


    while [[ -n $1 ]]; do
        # Source files
        run_from_smartcd=1 source "$1"
        shift
    done

    # Capture all variables in current environment
    local nonreadonly=( ${(@f)$(set +):#${~__varstash_autosource_ignore_pattern}} )

    local x
    local ret
    get_autostash_array_name
    # Get all variables that did not exist prior to source
    for x in ${(@)nonreadonly:#${~:-(${(j:|:)${(P)ret}})}}; do
        # Add var to list of autostashed variables
        set -A $ret "${(P@)ret}" "$x"
        # Mark var for deletion
        export "__varstash_nostash__$(_mangle_var $x)=1"
    done

    local stash_name
    # Unstash everything that was not modified
    for x in $nonreadonly; do
        case ${(Pt)x} in
            *readonly*)                local varstash_type="readonly";;
            array*)                    local varstash_type="array";;
            association*)              local varstash_type="associative_array";;
            *export*)                  local varstash_type="export" ;;
            (scalar*|integer*|float*)) local varstash_type="variable";;
            *)                         local varstash_type="" ;;
        esac

        _mangle_var $x stash_name
        local varstash_name="__varstash_${varstash_type}__$stash_name"
        if function () {
            if [[ $varstash_type == "readonly" ]]; then
                return 0
            fi
            if [[ $varstash_type != associative_array ]]; then
                [[ "${(P)x}" == "${(P)varstash_name}" ]]
                return $?
            fi

            # Explictly handle associative array equality

            if (( ${(P)#x} != ${(P)#varstash_name} )); then
                return 1
            fi

            local key
            for key in ${(Pk)x}; do
                # If key does not exist
                if ! [[ ${${(P)varstash_name}[$key]+1} ]]; then
                    return 1
                fi
                #  If values do not match
                if [[ ${${(P)x}[$key]} != ${${(P)varstash_name}[$key]} ]];then
                    return 1
                fi
            done
        }; then
            unstash "$x"
        fi
    done
}

function unstash() {
    while [[ -n $1 ]]; do
        local unstash_which=$1
        if [[ -z $unstash_which ]]; then
            continue
        fi

        local unstash_name
        _mangle_var $unstash_which unstash_name

        # This bit is a little tricky.  Here are the rules:
        #   1) unstash any alias, function, or variable which matches
        #   2) if one or more matches, but not all, delete any that did not
        #   3) if none match but nostash is found, delete all
        #   4) if none match and nostash not found, do nothing

        # Unstash any alias
        if [[ -n "${(Pt)${:-__varstash_alias__$unstash_name}}" ]]; then
            alias "$unstash_which=${(P)${:-__varstash_alias__$unstash_name}}"
            unset __varstash_alias__$unstash_name
            local unstashed_alias=1
        fi

        # Unstash any function
        if [[ -n "${(Pt)${:-__varstash_function__$unstash_name}}" ]]; then
            functions[$unstash_name]=${(P)${:-__varstash_function__$unstash_name}}
            unset __varstash_function__$unstash_name
            local unstashed_function=1
        fi

        # Unstash any variable
        local unstashed_variable=1 # assume variable was unstashed
        if [[ -n "${(Pt)${:-__varstash_readonly__$unstash_name}}" ]]; then
            unset __varstash_readonly__$unstash_name
        elif [[ -n "${(Pt)${:-__varstash_array__$unstash_name}}" ]]; then
            set -A $unstash_which "${(P@)${:-__varstash_array__$unstash_name}}"
            unset __varstash_array__$unstash_name
        elif [[ -n "${(Pt)${:-__varstash_associative_array__$unstash_name}}" ]]; then
            typeset -g -A $unstash_which
            set -A $unstash_which  "${(Pkv@)${:-__varstash_associative_array__$unstash_name}}"
            unset __varstash_associative_array__$unstash_name
        elif [[ -n "${(Pt)${:-__varstash_export__$unstash_name}}" ]]; then
            export "$unstash_which=${(P)${:-__varstash_export__$unstash_name}}"
            unset __varstash_export__$unstash_name
        elif [[ -n "${(Pt)${:-__varstash_variable__$unstash_name}}" ]]; then
            # Remove export attribute
            typeset +x $unstash_which
            typeset -g "$unstash_which=${(P)${:-__varstash_variable__$unstash_name}}"
            unset __varstash_variable__$unstash_name
        else
            unset unstashed_variable # no variable was unstashed
        fi

        # Unset any values which did not exist at time of stash
        local nostash="${(Pt)${:-__varstash_nostash__$unstash_name}}"
        unset __varstash_nostash__$unstash_name
        if [[  -n "$unstashed_variable" || -n "$unstashed_function" || -n "$unstashed_alias" ]]; then
            local unstashed=1
        fi

        if [[ ( -n "$nostash" && -z "$unstashed" ) || ( -n "$unstashed" && -z "$unstashed_alias" ) ]]; then
            unalias $unstash_which 2>/dev/null
        fi
        if [[ ( -n "$nostash" && -z "$unstashed" ) || ( -n "$unstashed" && -z "$unstashed_function" ) ]]; then
            unset -f $unstash_which 2>/dev/null
        fi
        if [[ ( -n "$nostash" && -z "$unstashed" ) || ( -n "$unstashed" && -z "$unstashed_variable" ) ]]; then
            # Don't try to unset illegal variable names
            # Using substitution to avoid using regex, which might fail to load on Zsh (minimal system).
            if [[ ${unstash_which//[^a-zA-Z0-9_]/} == $unstash_which && $unstash_which != [0-9]* ]]; then
                unset -v $unstash_which
            fi
        fi

        local ret
        get_autostash_array_name
        # Remove unstashed variable from autostash array
        if  [[ "${(Pt)ret}" == array* ]]; then
                set -A $ret "${(P@)ret:#$unstash_which}"
        fi
        shift
    done
}

function autounstash() {
    # If there is anything in (mangled) variable AUTOSTASH, then unstash it
    local ret
    get_autostash_array_name
    if (( ${#${(P)ret}} > 0 )); then
        local run_from_autounstash=1
        local autounstash_var
        for autounstash_var in ${(P)ret}; do
            unstash $autounstash_var
        done
        unset $ret
    fi
}

function _mangle_var() {
    local mangle_var_where="${varstash_dir:-$PWD}"
    mangle_var_where=${mangle_var_where//[^A-Za-z0-9]/_}
    local mangled_name=${1//[^A-Za-z0-9]/_}
    if [[ -z $2 ]]; then
        echo "_tmp_${mangle_var_where}_${mangled_name}"
    else
        typeset -g "$2=_tmp_${mangle_var_where}_${mangled_name}"
    fi
}

# vim: filetype=zsh autoindent expandtab shiftwidth=4 softtabstop=4
